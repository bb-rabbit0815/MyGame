// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Brothel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Brothel GetRootAsBrothel(ByteBuffer _bb) { return GetRootAsBrothel(_bb, new Brothel()); }
  public static Brothel GetRootAsBrothel(ByteBuffer _bb, Brothel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyBrothel(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, BrothelVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Brothel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Funds { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public fbs.Character? Slaves(int j) { int o = __p.__offset(6); return o != 0 ? (fbs.Character?)(new fbs.Character()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SlavesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Time { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public fbs.Character? Guests(int j) { int o = __p.__offset(10); return o != 0 ? (fbs.Character?)(new fbs.Character()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GuestsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public fbs.Facility? Facilities(int j) { int o = __p.__offset(12); return o != 0 ? (fbs.Facility?)(new fbs.Facility()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FacilitiesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<fbs.Brothel> CreateBrothel(FlatBufferBuilder builder,
      float funds = 0.0f,
      VectorOffset slavesOffset = default(VectorOffset),
      int time = 0,
      VectorOffset guestsOffset = default(VectorOffset),
      VectorOffset facilitiesOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Brothel.AddFacilities(builder, facilitiesOffset);
    Brothel.AddGuests(builder, guestsOffset);
    Brothel.AddTime(builder, time);
    Brothel.AddSlaves(builder, slavesOffset);
    Brothel.AddFunds(builder, funds);
    return Brothel.EndBrothel(builder);
  }

  public static void StartBrothel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFunds(FlatBufferBuilder builder, float funds) { builder.AddFloat(0, funds, 0.0f); }
  public static void AddSlaves(FlatBufferBuilder builder, VectorOffset slavesOffset) { builder.AddOffset(1, slavesOffset.Value, 0); }
  public static VectorOffset CreateSlavesVector(FlatBufferBuilder builder, Offset<fbs.Character>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSlavesVectorBlock(FlatBufferBuilder builder, Offset<fbs.Character>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlavesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<fbs.Character>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlavesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<fbs.Character>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSlavesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTime(FlatBufferBuilder builder, int time) { builder.AddInt(2, time, 0); }
  public static void AddGuests(FlatBufferBuilder builder, VectorOffset guestsOffset) { builder.AddOffset(3, guestsOffset.Value, 0); }
  public static VectorOffset CreateGuestsVector(FlatBufferBuilder builder, Offset<fbs.Character>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGuestsVectorBlock(FlatBufferBuilder builder, Offset<fbs.Character>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuestsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<fbs.Character>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGuestsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<fbs.Character>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGuestsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFacilities(FlatBufferBuilder builder, VectorOffset facilitiesOffset) { builder.AddOffset(4, facilitiesOffset.Value, 0); }
  public static VectorOffset CreateFacilitiesVector(FlatBufferBuilder builder, Offset<fbs.Facility>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFacilitiesVectorBlock(FlatBufferBuilder builder, Offset<fbs.Facility>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFacilitiesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<fbs.Facility>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFacilitiesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<fbs.Facility>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFacilitiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<fbs.Brothel> EndBrothel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fbs.Brothel>(o);
  }
  public static void FinishBrothelBuffer(FlatBufferBuilder builder, Offset<fbs.Brothel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBrothelBuffer(FlatBufferBuilder builder, Offset<fbs.Brothel> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class BrothelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Funds*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Slaves*/, fbs.CharacterVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*Time*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Guests*/, fbs.CharacterVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*Facilities*/, fbs.FacilityVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
