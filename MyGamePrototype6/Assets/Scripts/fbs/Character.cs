// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fbs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Character : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Character GetRootAsCharacter(ByteBuffer _bb) { return GetRootAsCharacter(_bb, new Character()); }
  public static Character GetRootAsCharacter(ByteBuffer _bb, Character obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyCharacter(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, CharacterVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Character __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public fbs.UUID? UniqueId { get { int o = __p.__offset(4); return o != 0 ? (fbs.UUID?)(new fbs.UUID()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public fbs.Sex Sex { get { int o = __p.__offset(8); return o != 0 ? (fbs.Sex)__p.bb.GetSbyte(o + __p.bb_pos) : fbs.Sex.None; } }
  public fbs.Species Species { get { int o = __p.__offset(10); return o != 0 ? (fbs.Species)__p.bb.GetSbyte(o + __p.bb_pos) : fbs.Species.None; } }
  public fbs.CharctorParameters? MaxParameters { get { int o = __p.__offset(12); return o != 0 ? (fbs.CharctorParameters?)(new fbs.CharctorParameters()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public fbs.CharctorParameters? Parameters { get { int o = __p.__offset(14); return o != 0 ? (fbs.CharctorParameters?)(new fbs.CharctorParameters()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public fbs.Sensitivity? MaxSensitivity { get { int o = __p.__offset(16); return o != 0 ? (fbs.Sensitivity?)(new fbs.Sensitivity()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public fbs.Sensitivity? Sensitivity { get { int o = __p.__offset(18); return o != 0 ? (fbs.Sensitivity?)(new fbs.Sensitivity()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public fbs.GeneticSkill? GeneticSkills(int j) { int o = __p.__offset(20); return o != 0 ? (fbs.GeneticSkill?)(new fbs.GeneticSkill()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int GeneticSkillsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartCharacter(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddUniqueId(FlatBufferBuilder builder, Offset<fbs.UUID> uniqueIdOffset) { builder.AddStruct(0, uniqueIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSex(FlatBufferBuilder builder, fbs.Sex sex) { builder.AddSbyte(2, (sbyte)sex, 0); }
  public static void AddSpecies(FlatBufferBuilder builder, fbs.Species species) { builder.AddSbyte(3, (sbyte)species, 0); }
  public static void AddMaxParameters(FlatBufferBuilder builder, Offset<fbs.CharctorParameters> maxParametersOffset) { builder.AddStruct(4, maxParametersOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, Offset<fbs.CharctorParameters> parametersOffset) { builder.AddStruct(5, parametersOffset.Value, 0); }
  public static void AddMaxSensitivity(FlatBufferBuilder builder, Offset<fbs.Sensitivity> maxSensitivityOffset) { builder.AddStruct(6, maxSensitivityOffset.Value, 0); }
  public static void AddSensitivity(FlatBufferBuilder builder, Offset<fbs.Sensitivity> sensitivityOffset) { builder.AddStruct(7, sensitivityOffset.Value, 0); }
  public static void AddGeneticSkills(FlatBufferBuilder builder, VectorOffset geneticSkillsOffset) { builder.AddOffset(8, geneticSkillsOffset.Value, 0); }
  public static void StartGeneticSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<fbs.Character> EndCharacter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fbs.Character>(o);
  }
  public static void FinishCharacterBuffer(FlatBufferBuilder builder, Offset<fbs.Character> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCharacterBuffer(FlatBufferBuilder builder, Offset<fbs.Character> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class CharacterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 16 /*fbs.UUID*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Sex*/, 1 /*fbs.Sex*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*Species*/, 1 /*fbs.Species*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*MaxParameters*/, 24 /*fbs.CharctorParameters*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Parameters*/, 24 /*fbs.CharctorParameters*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*MaxSensitivity*/, 36 /*fbs.Sensitivity*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Sensitivity*/, 36 /*fbs.Sensitivity*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 20 /*GeneticSkills*/, 12 /*fbs.GeneticSkill*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
